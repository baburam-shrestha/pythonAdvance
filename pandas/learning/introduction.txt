Prefer pip?
pandas can be installed via pip from PyPI.
$ pip install pandas

What kind of data does pandas handle?
When working with tabular data, such as data stored in spreadsheets or databases, 
pandas is the right tool for you. pandas will help you to explore, clean, and process your data. 
In pandas, a data table is called a DataFrame.

How do I read and write tabular data?
pandas supports the integration with many file formats or data sources out of the 
box (csv, excel, sql, json, parquet,…). 
Importing data from each of these data sources is provided by function with the prefix read_*
Similarly, the to_* methods are used to store data.

How do I select a subset of a table?
Selecting or filtering specific rows and/or columns? Filtering the data on a condition? 
Methods for slicing, selecting, and extracting the data you need are available in pandas

How to create plots in pandas?
pandas provides plotting your data out of the box, using the power of Matplotlib. 
You can pick the plot type (scatter, bar, boxplot,…) corresponding to your data.

How to create new columns derived from existing columns?
There is no need to loop over all rows of your data table to do calculations. 
Data manipulations on a column work elementwise. Adding a column to a DataFrame based on existing data 
in other columns is straightforward.

How to calculate summary statistics?
Basic statistics (mean, median, min, max, counts…) are easily calculable. 
These or custom aggregations can be applied on the entire data set, a sliding window of the data, 
or grouped by categories. The latter is also known as the split-apply-combine approach.

How to reshape the layout of tables?
Change the structure of your data table in multiple ways. You can melt() your data table from wide 
to long/tidy form or pivot() from long to wide format. With aggregations built-in,
a pivot table is created with a single command.

How to combine data from multiple tables?
Multiple tables can be concatenated both column wise and row wise as database-like 
join/merge operations are provided to combine multiple tables of data.

How to handle time series data?
pandas has great support for time series and has an extensive set of tools for working with dates,
times, and time-indexed data.

How to manipulate textual data?
Data sets do not only contain numerical data. pandas provides a wide range of functions to clean 
textual data and extract useful information from it.

Pandas Overview 
    pandas is a Python package providing fast, flexible, and expressive data structures 
    designed to make working with “relational” or “labeled” data both easy and intuitive. 
    It aims to be the fundamental high-level building block for doing practical, 
    real-world data analysis in Python. Additionally, it has the broader goal of becoming the most 
    powerful and flexible open source data analysis/manipulation tool available in any language.
    It is already well on its way toward this goal.

pandas is well suited for many different kinds of data:
    Tabular data with heterogeneously-typed columns, as in an SQL table or Excel spreadsheet
    Ordered and unordered (not necessarily fixed-frequency) time series data.
    Arbitrary matrix data (homogeneously typed or heterogeneous) with row and column labels
    Any other form of observational / statistical data sets. 
    The data need not be labeled at all to be placed into a pandas data structure

The two primary data structures of pandas, 
    Series (1-dimensional)    :  1D labeled homogeneously-typed array
    DataFrame (2-dimensional) : General 2D labeled, size-mutable tabular structure with 
                                potentially heterogeneously-typed column


Here are just a few of the things that pandas does well:
    Easy handling of missing data (represented as NaN) in floating point as well as non-floating 
        point data
    Size mutability: columns can be inserted and deleted from DataFrame and higher dimensional objects
    Automatic and explicit data alignment: objects can be explicitly aligned to a set of labels, 
        or the user can simply 
        ignore the labels and let Series, DataFrame, etc. automatically align the data for you in 
        computations
    Powerful, flexible group by functionality to perform split-apply-combine operations on data sets, 
        for both aggregating and transforming data
    Make it easy to convert ragged, differently-indexed data in other Python and NumPy data 
        structures into DataFrame objects
    Intelligent label-based slicing, fancy indexing, and subsetting of large data sets
    Intuitive merging and joining data set
    Flexible reshaping and pivoting of data sets
    Hierarchical labeling of axes (possible to have multiple labels per tick)
    Robust IO tools for loading data from flat files (CSV and delimited), Excel files, databases, 
        and saving / loading data from the ultrafast HDF5 format
    Time series-specific functionality: date range generation and frequency conversion,
         moving window statistics, date shifting, and lagging.

Some other notes
    pandas is fast. Many of the low-level algorithmic bits have been extensively tweaked in Cython code. 
        However, as with anything else generalization usually sacrifices performance. 
        So if you focus on one feature for your application you may be able to create a faster 
        specialized tool.
    pandas is a dependency of statsmodels, making it an important part of the statistical 
        computing ecosystem in Python.
    pandas has been used extensively in production in financial applications.

Why more than one data structure?
    The best way to think about the pandas data structures is as flexible containers for lower 
    dimensional data. For example, DataFrame is a container for Series, and Series is a container for scalars. We would like to be able to insert and remove objects from these containers in a dictionary-like fashion.
    Also, we would like sensible default behaviors for the common API functions which take into 
    account the typical orientation of time series and cross-sectional data sets. 
    When using the N-dimensional array (ndarrays) to store 2- and 3-dimensional data, a burden is placed 
    on the user to consider the orientation of the data set when writing functions; axes are considered more 
    or less equivalent (except when C- or Fortran-contiguousness matters for performance). 
    In pandas, the axes are intended to lend more semantic meaning to the data; i.e., 
    for a particular data set, there is likely to be a “right” way to orient the data. 
    The goal, then, is to reduce the amount of mental effort required to code up data transformations in 
    downstream functions.
    For example, with tabular data (DataFrame) it is more semantically helpful to think of the index 
    (the rows) and the columns rather than axis 0 and axis 1. 
    Iterating through the columns of the DataFrame thus results in more readable code:

for col in df.columns:
    series = df[col]
    # do something with series

Mutability and copying of data
    All pandas data structures are value-mutable (the values they contain can be altered) 
    but not always size-mutable. The length of a Series cannot be changed, but, for example, 
    columns can be inserted into a DataFrame. 
    However, the vast majority of methods produce new objects and leave the input data untouched. 
    In general we like to favor immutability where sensible.